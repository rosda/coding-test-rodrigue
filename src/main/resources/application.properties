# Application Name
spring.application.name = Rodrigue Coding Test Application

# Profile
spring.profiles.active = local

# Server Port
server.port = 8970

# Logging
logging.file = ./logs/application.log

logging.level.org.springframework.web = ERROR
logging.level.root = INFO

# RabbitMQ
spring.rabbitmq.host = localhost
spring.rabbitmq.port = 5672
spring.rabbitmq.username = guest
spring.rabbitmq.password = guest
spring.rabbitmq.queue.default = keywords_other
spring.rabbitmq.template.exchange = rodrigue_coding_test_exchange
spring.rabbitmq.listener.simple.concurrency = 8
spring.rabbitmq.listener.simple.max-concurrency = 16
spring.rabbitmq.template.receive-timeout = 70
spring.rabbitmq.connection-timeout = 70
spring.rabbitmq.template.reply-timeout = 70
spring.rabbitmq.cache.channel.checkout-timeout = 70

# Scenario: Every word that is not in the high or moderate configuration is disregarded, with this in mind,
# we are looking at targeted advertising for specific users.
# It needs to be noted that words will usually shift between high and moderate depending on the use and the initial
# queues have been filled with default words. A background process will be managing the reordering, removal, reshuffling
# of words in the queues.


# Moderately used keywords in a message
spring.rabbitmq.queue.moderate = keywords_moderate
spring.rabbitmq.file.location.moderate = ./src/main/resources/default.moderate-use.json

# Highly used keywords in a message
spring.rabbitmq.queue.high = keywords_high
spring.rabbitmq.file.location.high = ./src/main/resources/default.high-use.json

# Elasticsearch
spring.elasticsearch.clustername = elasticsearch_rodrigue_cluster
spring.elasticsearch.host = localhost
spring.elasticsearch.port = 9300
spring.elasticsearch.words.limit = 1000
